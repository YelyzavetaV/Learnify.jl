module Enet

using LinearAlgebra: norm

"""
    enet!(Œ∏::Vector{F}, X::Matrix{F}, y::Vector{F}, Œ±, Œ≤;
        i‚Çò::Integer=1000, œµ=1e-5)

Elastic Net regression method.

# References
[1] S.-J. Kim et al. "An Interior-Point Method for Large-Scale l‚ÇÅ-Regularized Least
    Squares". IEEE J. Sel. Top. Signal Process. 1(4):606-617, 2007.
[2] F. Pedregosa et. al. "Scikit-learn: Machine Learning in Python". J. Mach. Learn. Res.
    12:2825-2830, 2011.
"""
function enet!(Œ∏::Vector{F}, X::Matrix{F}, y::Vector{F}, Œ±, Œ≤;
    it‚Çò::Integer=1000, œµ=1e-5) where {F}

    N, M = size(X, 1), size(X, 2)
    Œª = Œ± * Œ≤ * N
    Œ≥ = Œ± * (1.0 - Œ≤) * N

    R = y - X * Œ∏
    z = sum(X .^ 2, dims=1)

    œµÃÉ = œµ * y' * y
    Œ∑ = œµÃÉ + 1.0

    it = 0
    converged = false
    while (~converged && it < it‚Çò)
        it += 1
        Œ∏‚Çò, ùùô = 0.0, 0.0
        for j = 1:M
            z[j] == 0 && continue
            Œ∏ÃÉ = Œ∏[j]
            if Œ∏ÃÉ ‚â† 0
                R += X[:, j] * Œ∏ÃÉ
            end
            G = X[:, j]' * R
            Œ∏[j] = sign(G) * max(abs(G) - Œª, 0) / (z[j] + Œ≥)
            if Œ∏[j] ‚â† 0
                R -= X[:, j] * Œ∏[j]
            end
            ùùô = max(ùùô, abs(Œ∏[j] - Œ∏ÃÉ))
            Œ∏‚Çò = max(Œ∏‚Çò, abs(Œ∏[j]))
        end
        if (Œ∏‚Çò == 0 || ùùô / Œ∏‚Çò < œµ || it == it‚Çò)
            c‚ÇÅ = c‚ÇÇ = c‚ÇÉ = 1
            d = maximum(abs.(X' * R - Œ≥ * Œ∏))
            if d > Œª
                s = Œª / d
                c‚ÇÅ -= 0.5 * (1.0 - s^2)
                c‚ÇÇ = c‚ÇÉ = s
            end
            Œ∑ = (
                c‚ÇÅ * R' * R
                - c‚ÇÇ * R' * y
                + Œª * norm(Œ∏, 1)
                + 0.5 * Œ≥ * (1.0 + c‚ÇÉ^2) * (Œ∏' * Œ∏)
            )
            if Œ∑ < œµÃÉ
                converged = true
            end
        end
    end
    if ~converged
        @warn """Elastic Net algorithm did not converge: try increasing the number of
            maximal allowed iterations it‚Çò or decreasing the tolerance œµ."""
    end
    return it, Œ∑
end

end